package com.manuanand.battlechess;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/game") // This means URL's start with /game(after Application path)
public class GameController {
	@Autowired // This means to get the bean called puzzleRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private GameRepository gameRepository;

	@Autowired
	private PlayerRepository playerRepository;
	
	///
	// Puzzle Repository
	///
	@PostMapping(path="/create") // Map ONLY POST Requests
	public @ResponseBody Game createGame (
			@RequestParam Integer playerId1, @RequestParam Integer playerId2) {
		
		// Verify player ID Exists
		Optional<Player> player1 = playerRepository.findById(playerId1);
		if (player1.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Player with ID" + playerId1 + " not found");
		}

		Optional<Player> player2 = playerRepository.findById(playerId2);
		if (player2.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "Player with ID" + playerId2 + " not found");
		}

		// Create Game
		Game newGame = new Game();
		newGame.setPlayerId1(playerId1);
		newGame.setPlayerId2(playerId2);
		newGame.setStatus(GameStatus.InProgress);
		newGame.setDate(new Date());
		
		gameRepository.save(newGame);
		
		return newGame;
	}
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<Game> getAllGames() {
		
		// This returns a JSON or XML with the players
		return gameRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody Game getSpecificGame(@PathVariable String id) {
		
		Integer gameId = null;
		try {
			gameId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<Game> game = gameRepository.findById(gameId);
		if (!game.isEmpty()) {
			return game.get();
		} 

		return null;
	}
}